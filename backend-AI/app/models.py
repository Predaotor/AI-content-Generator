from sqlalchemy import (
    Column,
    Integer,
    String,
    Boolean,
    ForeignKey,
    Text,
    Date,
    DateTime,
    func
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import declarative_base

Base = declarative_base()
class User(Base):
    """
    Represents an application user.

    Attributes:
        id (int): Primary key.
        username (str): Unique username.
        email (str): Unique email address.
        hashed_password (str): Hashed password for authentication.
        is_active (bool): Whether the user is active.
        outputs (List[SavedOutput]): Relationship to saved generations.
        token_usage (UserToken): One-to-one relationship for tracking token usage.
    """
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)

    outputs = relationship(
        "SavedOutput",
        back_populates="user",
        cascade="all, delete"
    )
    token_usage = relationship(
        "UserToken",
        back_populates="user",
        uselist=False,
        cascade="all, delete"
    )


class SavedOutput(Base):
    """
    Represents content generated by the AI and saved by the user.

    Attributes:
        id (int): Primary key.
        user_id (int): Foreign key to users table.
        template_type (str): Type of template ('blog_post', 'image', etc.).
        content (str): The generated text or image URL.
        created_at (datetime): Timestamp of when the generation was saved.
    """
    __tablename__ = "saved_outputs"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"))
    template_type = Column(String(50), nullable=False)
    content = Column(Text, nullable=False)
    created_at = Column(DateTime, server_default=func.now())

    user = relationship("User", back_populates="outputs")


class UserToken(Base):
    """
    Tracks token usage per user for rate limiting or pricing models.

    Attributes:
        user_id (int): One-to-one relationship with users table.
        tokens_used (int): Total tokens used by the user.
        last_used (date): The last date the tokens were used.
    """
    __tablename__ = "user_tokens"

    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), primary_key=True)
    tokens_used = Column(Integer, default=0)
    last_used = Column(Date, default=func.current_date())

    user = relationship("User", back_populates="token_usage")